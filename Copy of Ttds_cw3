{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"Ttds_cw3","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/ttds-cw3-109df7be-25b3-4ac8-932c-ecbac9df7562.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240305/auto/storage/goog4_request&X-Goog-Date=20240305T153500Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=315e838c71c57e97eb2be0ffa3cdb89f14ba3f3dd32cac0cc7d81d02f6b3af1dcb5d08276fc2afa4f84df4245bb262607f7d58d9af78acb7b51b90951f64f47edbf23125001b44e8d3a6551925a45a01c6a42ec46ce5ef062864c45e511e13bc641a4f19ba9639dcff5becdf2dfae88a22f9d3ed674a30b1d4f548e92a62ef0536f901105aa4d7f036406cbf41e7d016c700f192ddf92919bdc8f852ee1612a560a5e21a135f436bcfa6862576cd063cd23f21b11f426e2f8a05a72c13c3b39b57e166a80c03dd3c712bc0cebe1ce83da49e6a59f7b900ab6a2ccc98a9c146a5d41060e0e8e66939d205fc53fc207f2c7775cfb951a89074ebf262e85d8b6fa5","timestamp":1709652941393}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"dg5J-0CrQP-w"}},{"cell_type":"code","source":["Doesn't support Boolean operators as it treats all terms equally and checks spellings according to positional index which is time consuming and computationally expensive to run in our case."],"metadata":{"id":"_pt9xwl2QP-y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Below code treats whole query as single term which is incorrect."],"metadata":{"id":"1khRluAcQP-2"}},{"cell_type":"code","source":["import Levenshtein\n","\n","# Sample positional index dictionary\n","positional_index = {\n","    'apple': {'df': 2, 'posting_list': {'doc1': {1, 5, 20}, 'doc2': {3, 8, 15}}},\n","    'banana': {'df': 1, 'posting_list': {'doc1': {2, 6, 10}}},\n","    'orange': {'df': 2, 'posting_list': {'doc2': {7, 11, 14}, 'doc3': {13, 18, 22}}},\n","    'grape': {'df': 1, 'posting_list': {'doc1': {4, 8, 13}}},\n","    'peach': {'df': 1, 'posting_list': {'doc2': {1, 9, 17}}}\n","}\n","\n","def spell_check(query):\n","    closest_word = None\n","    min_distance = float('inf')\n","\n","    # Check each word in the positional index\n","    for word in positional_index.keys():\n","        distance = Levenshtein.distance(query, word)\n","        if distance < min_distance:\n","            min_distance = distance\n","            closest_word = word\n","\n","    return closest_word\n","\n","# Example usage\n","query = 'appeland bana'\n","closest_word = spell_check(query)\n","if closest_word:\n","    print(f\"Suggested spelling for '{query}': {closest_word}\")\n","else:\n","    print(f\"No suggestion found for '{query}'\")\n",""],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T14:45:42.716525Z","iopub.execute_input":"2024-03-05T14:45:42.717093Z","iopub.status.idle":"2024-03-05T14:45:42.729698Z","shell.execute_reply.started":"2024-03-05T14:45:42.717056Z","shell.execute_reply":"2024-03-05T14:45:42.728365Z"},"trusted":true,"id":"GsKrTQHyQP-3","outputId":"0e6a5f21-7387-4943-9d99-85527d7da905"},"execution_count":null,"outputs":[{"name":"stdout","text":"Suggested spelling for 'appeland bana': banana\n","output_type":"stream"}]},{"cell_type":"markdown","source":["Below code treats each term separately but has the complications discussed above"],"metadata":{"id":"xMdCD-DGQP-5"}},{"cell_type":"code","source":["import Levenshtein\n","\n","# Sample positional index dictionary\n","positional_index = {\n","    'apple': {'df': 2, 'posting_list': {'doc1': {1, 5, 20}, 'doc2': {3, 8, 15}}},\n","    'banana': {'df': 1, 'posting_list': {'doc1': {2, 6, 10}}},\n","    'orange': {'df': 2, 'posting_list': {'doc2': {7, 11, 14}, 'doc3': {13, 18, 22}}},\n","    'grape': {'df': 1, 'posting_list': {'doc1': {4, 8, 13}}},\n","    'peach': {'df': 1, 'posting_list': {'doc2': {1, 9, 17}}}\n","}\n","\n","def spell_check_term(term):\n","    closest_word = None\n","    min_distance = float('inf')\n","\n","    # Check each word in the positional index\n","    for word in positional_index.keys():\n","        distance = Levenshtein.distance(term, word)\n","        if distance < min_distance:\n","            min_distance = distance\n","            closest_word = word\n","\n","    return closest_word\n","\n","def spell_check_query(query):\n","    corrected_query = []\n","    # Split the query into individual terms\n","    terms = query.split()\n","    for term in terms:\n","        closest_word = spell_check_term(term)\n","        if closest_word:\n","            corrected_query.append(closest_word)\n","        else:\n","            corrected_query.append(term)\n","    return ' '.join(corrected_query)\n","\n","# Example usage\n","query = 'appl AND bnnana orangge'\n","corrected_query = spell_check_query(query)\n","print(f\"Suggested spelling for '{query}': {corrected_query}\")\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T14:48:29.97312Z","iopub.execute_input":"2024-03-05T14:48:29.973569Z","iopub.status.idle":"2024-03-05T14:48:29.986969Z","shell.execute_reply.started":"2024-03-05T14:48:29.973535Z","shell.execute_reply":"2024-03-05T14:48:29.9853Z"},"trusted":true,"id":"-B7n06zZQP-5","outputId":"ed2715af-47bd-430a-dda1-670f4e9cc954"},"execution_count":null,"outputs":[{"name":"stdout","text":"Suggested spelling for 'appl AND bnnana orangge': apple apple banana orange\n","output_type":"stream"}]},{"cell_type":"markdown","source":["**Don't use below code as it doesn't work for multiple languages **"],"metadata":{"id":"CVaQdcCnQP-6"}},{"cell_type":"code","source":["import spellchecker\n","from spellchecker import SpellChecker\n","\n","def spell_check_query(query):\n","    spell = SpellChecker()\n","    corrected_query = []\n","    # Split the query into individual terms\n","    terms = query.split()\n","    for term in terms:\n","        corrected_term = spell.correction(term)\n","        corrected_query.append(corrected_term)\n","    return ' '.join(corrected_query)\n","\n","# Example usage\n","query = 'Mieuz vaut tard que jamais.'\n","corrected_query = spell_check_query(query)\n","print(f\"Suggested spelling for '{query}': {corrected_query}\")\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T15:14:35.430305Z","iopub.execute_input":"2024-03-05T15:14:35.430763Z","iopub.status.idle":"2024-03-05T15:14:36.681416Z","shell.execute_reply.started":"2024-03-05T15:14:35.430731Z","shell.execute_reply":"2024-03-05T15:14:36.680388Z"},"trusted":true,"id":"s4c_DVkVQP-7","outputId":"5e556e73-640b-498f-8268-7430eeae8cad"},"execution_count":null,"outputs":[{"name":"stdout","text":"Suggested spelling for 'Mieuz vaut tard que jamais.': minus vast hard due jamaica\n","output_type":"stream"}]},{"cell_type":"code","source":["pip install pyspellchecker\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T14:55:52.161429Z","iopub.execute_input":"2024-03-05T14:55:52.162072Z","iopub.status.idle":"2024-03-05T14:56:08.960882Z","shell.execute_reply.started":"2024-03-05T14:55:52.16203Z","shell.execute_reply":"2024-03-05T14:56:08.959654Z"},"trusted":true,"id":"-Skkxb4JQP-8","outputId":"a91c52cb-7c3c-4b7e-8480-f716230c2e48"},"execution_count":null,"outputs":[{"name":"stdout","text":"Collecting pyspellchecker\n  Downloading pyspellchecker-0.8.1-py3-none-any.whl.metadata (9.4 kB)\nDownloading pyspellchecker-0.8.1-py3-none-any.whl (6.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m55.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: pyspellchecker\nSuccessfully installed pyspellchecker-0.8.1\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"markdown","source":["Use below code for our project"],"metadata":{"id":"VMLvyPlYQP-9"}},{"cell_type":"markdown","source":["After careful consideration, i implemented logic to only English language and keep other languages the same without checking, as it is very complicated to include multiple languages for this task and only degenerates the task and system if i try including multiple languages."],"metadata":{"id":"UJLcSi7tQP-9"}},{"cell_type":"markdown","source":["I have used weighted systems which further enhance the task."],"metadata":{"id":"lK-FEt33QP-9"}},{"cell_type":"code","source":["from spellchecker import SpellChecker\n","from autocorrect import Speller\n","from langdetect import detect\n","from textblob import TextBlob\n","\n","def weighted_spell_check_query(query):\n","    corrected_query = []\n","    # Split the query into individual terms\n","    terms = query.split()\n","    for term in terms:\n","        language = detect(term)\n","        if language == 'en':  # Check if the term is in English\n","            # Weighted spell check using multiple libraries\n","            corrected_term = weighted_spell_check_en(term)\n","        else:\n","            corrected_term = term  # Retain word if it's not in English\n","        corrected_query.append(corrected_term)\n","    return ' '.join(corrected_query)\n","\n","def weighted_spell_check_en(term):\n","    # Weighted spell check using multiple libraries\n","    spellchecker = SpellChecker()\n","    autocorrect = Speller(lang='en')\n","    textblob = TextBlob(term)\n","\n","    # Calculate weights for each library\n","    spellchecker_weight = 0.4\n","    autocorrect_weight = 0.3\n","    textblob_weight = 0.3\n","\n","    # Spell check using each library\n","    spellchecker_correction = spellchecker.correction(term)\n","    autocorrect_correction = autocorrect(term)\n","    textblob_correction = str(textblob.correct())\n","\n","    # Calculate weighted correction\n","    corrected_term = (\n","        spellchecker_weight * spellchecker_correction +\n","        autocorrect_weight * autocorrect_correction +\n","        textblob_weight * textblob_correction\n","    )\n","\n","    return corrected_term\n","\n","# Example usage\n","query = 'Mieuz vaut tard que jamais shhsh'\n","corrected_query = weighted_spell_check_query(query)\n","print(f\"Suggested spelling for '{query}': {corrected_query}\")\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T15:17:58.344093Z","iopub.execute_input":"2024-03-05T15:17:58.344543Z","iopub.status.idle":"2024-03-05T15:17:58.550247Z","shell.execute_reply.started":"2024-03-05T15:17:58.344507Z","shell.execute_reply":"2024-03-05T15:17:58.547923Z"},"trusted":true,"id":"OZTwk51-QP--","outputId":"8dc6dc17-a2e2-4a66-fe55-eb54314ee6d9"},"execution_count":null,"outputs":[{"name":"stdout","text":"Suggested spelling for 'Mieuz vaut tard que jamais shhsh': Mieuz vaut tard que jamais shhsh\n","output_type":"stream"}]},{"cell_type":"code","source":["pip install langdetect\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-05T15:09:58.856301Z","iopub.execute_input":"2024-03-05T15:09:58.856769Z","iopub.status.idle":"2024-03-05T15:10:17.185255Z","shell.execute_reply.started":"2024-03-05T15:09:58.856736Z","shell.execute_reply":"2024-03-05T15:10:17.183758Z"},"trusted":true,"id":"IKmmWVx_QP-_","outputId":"a74a18ac-edf6-465d-9e1e-bfb8a00a44cd"},"execution_count":null,"outputs":[{"name":"stdout","text":"Collecting langdetect\n  Downloading langdetect-1.0.9.tar.gz (981 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m981.5/981.5 kB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from langdetect) (1.16.0)\nBuilding wheels for collected packages: langdetect\n  Building wheel for langdetect (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for langdetect: filename=langdetect-1.0.9-py3-none-any.whl size=993225 sha256=59a421337447d557eff2de2899c734c0b1e8e61cb593671adafc7d33522da438\n  Stored in directory: /root/.cache/pip/wheels/95/03/7d/59ea870c70ce4e5a370638b5462a7711ab78fba2f655d05106\nSuccessfully built langdetect\nInstalling collected packages: langdetect\nSuccessfully installed langdetect-1.0.9\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]}]}